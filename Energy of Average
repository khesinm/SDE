# 05/19/2023
import matplotlib.pyplot as plt
import numpy as np
import sdeint

# 06/23/2022: removed oscillating term from U1 and divided by minimum x value
# 06/24/2022: updated formulae for f and N

g = 0.3
ω = 1
β = 0.15
Γ = 0.15
ϕ = 0

# y0 = np.array([0, 0.1, 0.1, 0.001])
y0 = np.array([1, 0, 0.1, 0.001])
T = 2*np.pi/ω
num_periods = 80
spacing = num_periods*2000
tspan = np.linspace(0, num_periods*T, spacing)

# main function (including dissipation)
def f(y, t):
  x = y[0]
  p = y[1]
  χ = y[2]
  Π = y[3]

  f0 = p
  f1 = x - β ** 2 * x ** 3 + g / β * np.cos(ω * t) - 2 * Γ * p - 3 * x * β ** 2 * χ ** 2
  f2 = Π + Γ * ((χ - χ ** 3 + χ * Π ** 2 - 1 / (4 * χ)) * np.cos(2 * ϕ) - Π * (-1 + 2 * χ ** 2) * np.sin(
    2 * ϕ) + χ - χ ** 3 - χ * Π ** 2 + 1 / (4 * χ))
  f3 = χ * (1 - 3 * β ** 2 * (x ** 2 + χ ** 2)) + 1 / (4 * χ ** 3) + Γ * (
        (Π ** 3 - Π + 3 * Π / (4 * χ ** 2) - Π * χ ** 2) * np.cos(2 * ϕ) - (
          -1 / (4 * χ ** 3) + 1 / χ - χ + 2 * χ * Π ** 2) * np.sin(2 * ϕ) + (
              -Π ** 3 - Π - 3 * Π / (4 * χ ** 2) - Π * χ ** 2))
  return np.array([f0, f1, f2, f3])


# noise function
def N(y, t):
  x = y[0]
  p = y[1]
  χ = y[2]
  Π = y[3]
  return np.diag([
    np.sqrt(Γ) * ((2 * (χ ** 2 - 1 / 2)) * np.cos(ϕ) + 2 * χ * Π * np.sin(ϕ)),
    np.sqrt(Γ) * (2 * χ * Π * np.cos(ϕ) + 2 * (-1 / 2 + Π ** 2 + 1 / (4 * χ ** 2)) * np.sin(ϕ)),
    0,
    0])

num_xs = 50
xs = []

# building individual result arrays for each variable
result = sdeint.itoint(f, N, y0, tspan)

# calculating the trajectories
for i in range(num_xs):
  total = sdeint.itoint(f, N, y0, tspan)
  xs.append(total)

averages = [[], [], [], []]

# taking the average for each variable of the trajectories
for i in range(len(total)):
  total0 = 0
  total1 = 0
  total2 = 0
  total3 = 0
  for x in xs:
    total0 += x[i][0]
    total1 += x[i][1]
    total2 += x[i][2]
    total3 += x[i][3]
  average0 = (1 / len(xs)) * total0
  average1 = (1 / len(xs)) * total1
  average2 = (1 / len(xs)) * total2
  average3 = (1 / len(xs)) * total3
  averages[0].append(average0)
  averages[1].append(average1)
  averages[2].append(average2)
  averages[3].append(average3)

x_series = [averages[0][i*2000] for i in range(int(.20*len(averages[0])/2000), int(len(averages[0])/2000))]
χ_series = [averages[2][i*2000] for i in range(int(.20*len(averages[2])/2000), int(len(averages[2])/2000))]
'''
x_series = [averages[0][i]]
χ_series = [averages[2][i]]
'''

# --------------- energy functions-------------------
# classical energy function
def U1(x):
  return (-1 / 2 * x ** 2 + 1 / 4 * β ** 2 * x ** 4) * β


# quantum energy function
def U2(χ):
  return 3 / 4 * β ** 2 * χ ** 4 - 1 / 2 * χ ** 2 + 1 / (8 * χ ** 2)


# coupled energy function
def U12(x, χ):
  return 3 / 2 * β ** 2 * x ** 2 * χ ** 2

# constructing arrays of energies for different values of x and χ

U1s = []
U2s = []
U12s = []
for i in range(len(x_series)):
  x = x_series[i]
  χ = χ_series[i]
  U1s.append(U1(x))
  U2s.append(U2(χ))
  U12s.append(U12(x, χ)*β**2)

#plotting energies
ax = plt.axes(projection='3d')
ax.scatter3D(U1s, U2s, U12s, s=.2, c='r')
ax.set_xlabel('U1')
ax.set_ylabel('U2')
ax.set_zlabel('U12')
'''
ax.axes.set_xlim3d(-1.5/β, 1.5/β)
ax.axes.set_ylim3d(-1.5/β, 1.5/β)
'''
ax.set_title('U12')
plt.show()
